#####################
### OGS-6 Project ###
#####################

# Specify minimum CMake version
cmake_minimum_required(VERSION 2.6)

# Project name
project( OGS-6 )

### CMake includes ###
INCLUDE(scripts/cmake/CMakeSetup.cmake)
INCLUDE(scripts/cmake/CompilerSetup.cmake)
INCLUDE(scripts/cmake/Find.cmake)

###############
### Options ###
###############

# Configurations
OPTION(USE_OPENMP "Use OpenMP" OFF)
OPTION(USE_MPI "Use MPI" OFF)
OPTION(USE_EIGEN "Use Eigen" OFF)
OPTION(USE_LIS "Use LIS" OFF)
OPTION(USE_BLAS_LAPACK "Use BLAS&LAPACK" OFF)
OPTION(USE_PETSC "Use PETSc libs for parallel computing" OFF)
OPTION(PYTHON_WRAP "Provide Python interface" OFF)

IF(USE_OPENMP)
	FIND_PACKAGE( OpenMP REQUIRED )
	SET( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}" )
	SET( CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}" )
	IF(NOT MSVC)
		SET( CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -lgomp" )
	ENDIF(NOT MSVC)
ENDIF(USE_OPENMP)

IF (USE_MPI)
	FIND_PACKAGE(MPI)
	IF(MPI_FOUND)		
	  SET(CMAKE_C_COMPILER ${MPI_COMPILER})
	  SET(CMAKE_CXX_COMPILER ${MPI_COMPILER})
		ADD_DEFINITIONS(-DUSE_MPI)
	ELSE(MPI_FOUND)
	  MESSAGE (FATAL_ERROR "Aborting: MPI implementation is not found!")
	ENDIF(MPI_FOUND)			
ENDIF (USE_MPI)

IF(USE_EIGEN)
	FIND_PACKAGE ( Eigen REQUIRED )
	ADD_DEFINITIONS(-DUSE_EIGEN)
ENDIF(USE_EIGEN)

IF(USE_LIS)
	FIND_PACKAGE ( LIS REQUIRED )
	ADD_DEFINITIONS(-DUSE_LIS)
ENDIF(USE_LIS)

IF(USE_BLAS_LAPACK)
	ADD_DEFINITIONS(-DUSE_BLAS_LAPACK)
	IF(NOT MSVC)
		FIND_PACKAGE ( BLAS REQUIRED )
		FIND_PACKAGE ( LAPACK REQUIRED )
	ELSE(NOT MSVC)
		find_library(BLAS_LIBRARIES
			NAMES libf2cblas.lib
			PATHS ${CMAKE_SOURCE_DIR}/../ )	
		find_library(LAPACK_LIBRARIES
			NAMES libf2clapack.lib
			PATHS ${CMAKE_SOURCE_DIR}/../ )	
	ENDIF(NOT MSVC)

ENDIF(USE_BLAS_LAPACK)

IF(USE_PETSC)
	MESSAGE (STATUS  "Configuring for PETSc" )

	ADD_DEFINITIONS(-DUSE_PETSC)
	IF(UNIX)
		ADD_DEFINITIONS(-Wunused-parameter)
	ENDIF(UNIX)

	FIND_PACKAGE(PETSc REQUIRED)
	IF (NOT USE_MPI)
		set (PETSC_INCLUDES ${PETSC_DIR}/include/mpiuni ${PETSC_INCLUDES})
	ENDIF (NOT USE_MPI)
	INCLUDE_DIRECTORIES( ${PETSC_INCLUDES} )
ENDIF(USE_PETSC)

IF (PYTHON_WRAP)
	FIND_PACKAGE(SWIG REQUIRED)
	INCLUDE(${SWIG_USE_FILE})
	FIND_PACKAGE(PythonLibs)
	INCLUDE_DIRECTORIES(${PYTHON_INCLUDE_PATH})
ENDIF()

# Profiling
IF((CMAKE_COMPILER_IS_GNUCXX OR CMAKE_COMPILER_IS_GNUCC) AND GPROF_PATH)
	OPTION(OGS_PROFILE "Enables compiling with flags set for profiling with gprof." OFF)
ENDIF() # GCC AND GPROF_PATH

# Set build directories
SET( EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR}/bin )
SET( LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/lib )

# Add subdirectories with the projects
ADD_SUBDIRECTORY( Base )
ADD_SUBDIRECTORY( GeoLib )
ADD_SUBDIRECTORY( MathLib )
ADD_SUBDIRECTORY( MeshLib )
ADD_SUBDIRECTORY( DiscreteLib )
ADD_SUBDIRECTORY( FemLib )
ADD_SUBDIRECTORY( FdmLib )
ADD_SUBDIRECTORY( NumLib )
ADD_SUBDIRECTORY( SolutionLib )
IF (GTEST_FOUND)
	INCLUDE_DIRECTORIES(${GTEST_INCLUDE_DIRS})
	ADD_SUBDIRECTORY(Tests)
ENDIF (GTEST_FOUND)
IF(USE_MPI)
	ADD_SUBDIRECTORY(TestsMPI)
ENDIF(USE_MPI)
IF (PYTHON_WRAP)
	ADD_SUBDIRECTORY(ogsPython)
ENDIF()

IF(DOXYGEN_FOUND)
	OPTION(DOCS_GENERATE_DIAGRAMS "Use the DOT tool to generate class diagrams." OFF)
	OPTION(DOCS_GENERATE_CALL_GRAPHS "Generate call dependency graphs." OFF)
	OPTION(DOCS_GENERATE_COLLABORATION_GRAPHS "Generate collaboration graphs." OFF)
	IF(DOT_TOOL_PATH AND DOCS_GENERATE_DIAGRAMS)
		SET(DOT_FOUND "YES" CACHE INTERNAL "")
	ENDIF() # DOT_TOOL_PATH AND DOCS_GENERATE_DIAGRAMS
	IF(DOCS_GENERATE_CALL_GRAPHS)
		SET(DOCS_GENERATE_CALL_GRAPHS_STRING "YES" CACHE INTERNAL "")
	ENDIF() # DOCS_GENERATE_CALL_GRAPHS
	IF(DOCS_GENERATE_COLLABORATION_GRAPHS)
		SET(DOCS_GENERATE_COLLABORATION_GRAPHS_STRING "YES" CACHE INTERNAL "")
	ENDIF() # DOCS_GENERATE_COLLABORATION_GRAPHS
	GET_FILENAME_COMPONENT(DOT_TOOL_PATH_ONLY ${DOT_TOOL_PATH} PATH)
	CONFIGURE_FILE(scripts/doxygen/Doxyfile.in ${PROJECT_BINARY_DIR}/Doxyfile)
	ADD_CUSTOM_TARGET(doc ${DOXYGEN_EXECUTABLE} ${PROJECT_BINARY_DIR}/Doxyfile
		WORKING_DIRECTORY ${PROJECT_BINARY_DIR}
		COMMENT "Generating source code documentation with Doxygen." VERBATIM)
ENDIF() # DOXYGEN_FOUND

